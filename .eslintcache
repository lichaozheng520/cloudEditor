[{"/Users/mac/Desktop/2021师资培训Electron/myproject/src/index.js":"1","/Users/mac/Desktop/2021师资培训Electron/myproject/src/App.js":"2","/Users/mac/Desktop/2021师资培训Electron/myproject/src/reportWebVitals.js":"3","/Users/mac/Desktop/2021师资培训Electron/myproject/src/components/FileSearch.js":"4","/Users/mac/Desktop/2021师资培训Electron/myproject/src/components/FileList.js":"5","/Users/mac/Desktop/2021师资培训Electron/myproject/src/utils/defaultFiles.js":"6","/Users/mac/Desktop/2021师资培训Electron/myproject/src/hooks/useKeyPress.js":"7","/Users/mac/Desktop/2021师资培训Electron/myproject/src/components/BottomBtn.js":"8","/Users/mac/Desktop/2021师资培训Electron/myproject/src/components/TabList.js":"9","/Users/mac/Desktop/2021师资培训Electron/myproject/src/utils/helper.js":"10","/Users/mac/Desktop/2021师资培训Electron/myproject/src/utils/fileHelper.js":"11","/Users/mac/Desktop/2021师资培训Electron/myproject/src/hooks/useContextMenu.js":"12","/Users/mac/Desktop/2021师资培训Electron/myproject/src/hooks/useIpcRenderer.js":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":12413,"mtime":1613013645000,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":2774,"mtime":1612249215000,"results":"18","hashOfConfig":"15"},{"size":4990,"mtime":1612756776000,"results":"19","hashOfConfig":"15"},{"size":382,"mtime":1611198019000,"results":"20","hashOfConfig":"21"},{"size":798,"mtime":1612516212000,"results":"22","hashOfConfig":"15"},{"size":645,"mtime":1611285566000,"results":"23","hashOfConfig":"15"},{"size":1616,"mtime":1611197737000,"results":"24","hashOfConfig":"15"},{"size":698,"mtime":1612755223000,"results":"25","hashOfConfig":"15"},{"size":507,"mtime":1611392581000,"results":"26","hashOfConfig":"15"},{"size":862,"mtime":1612754525000,"results":"27","hashOfConfig":"15"},{"size":544,"mtime":1612775392000,"results":"28","hashOfConfig":"15"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"tghvot",{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"31"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"ymyh6e",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"31"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"31"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"/Users/mac/Desktop/2021师资培训Electron/myproject/src/index.js",[],["62","63"],"/Users/mac/Desktop/2021师资培训Electron/myproject/src/App.js",["64","65"],"import React, { useState, useEffect } from 'react'\r\nimport { faPlus, faFileImport, faSave } from '@fortawesome/free-solid-svg-icons'\r\nimport SimpleMDE from 'react-simplemde-editor'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport {flattenArr, objToArr} from './utils/helper'\r\nimport fileHelper from './utils/fileHelper'\r\nimport './App.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'easymde/dist/easymde.min.css'\r\nimport FileSearch from './components/FileSearch'\r\nimport FileList from './components/FileList'\r\nimport BottomBtn from './components/BottomBtn'\r\nimport TabList from './components/TabList'\r\nimport useIpcRenderer from './hooks/useIpcRenderer'\r\n\r\n// 在React的App.js中引用Node.js的模块\r\n// 需要在require前添加window对象\r\nconst { join, basename, extname, dirname } = window.require('path')\r\n//console.dir(path)\r\n\r\n// 在渲染进程中使用主进程的API，需要使用到remote\r\n// 需要在main.js创建Window的时候，设置一个新的参数使能remote\r\n// webPreferences: { enableRemoteModule: true }\r\n// 否则这个remote将获取不到而导致报错\r\nconst { remote, ipcRenderer } = window.require('electron')\r\n\r\n//【注意】electron版本不能太新，使用4.0.0版本\r\nconst Store = window.require('electron-store')\r\nconst fileStore = new Store({'name': 'Files Data'})\r\nconst settingsStore = new Store({name: 'Settings'})\r\n\r\n// 数据持久化\r\nconst saveFilesToStore = (files) => {\r\n  // we don't have to store any info in file system, eg:isNew, body, etc.\r\n  const filesStoreObj = objToArr(files).reduce((result, file) => {\r\n    const { id, path, title, createdAt } = file\r\n    result[id] = {\r\n      id,\r\n      path,\r\n      title,\r\n      createdAt,\r\n    }\r\n    return result\r\n  }, {})\r\n  fileStore.set('files', filesStoreObj)\r\n}\r\n\nfunction App() {\r\n  // 修改前的代码\r\n  // const [files, setFiles] = useState(defaultFiles)\r\n  // 修改后的代码\r\n  const [files, setFiles] = useState(fileStore.get('files') || {})\r\n  //console.log(files)\r\n  const [activeFileID, setActiveFileID] = useState('')\r\n  const [openedFileIDs, setOpenedFileIDs] = useState([])\r\n  const [unsavedFileIDs, setUnsavedFileIDs] = useState([])\r\n  const [searchedFiles, setSearchedFiles] = useState([])\r\n  \r\n  // 添加的代码\r\n  const filesArr = objToArr(files)\r\n  //console.log(filesArr)\r\n  //const savedLocation = remote.app.getPath('documents')\r\n  const savedLocation = settingsStore.get('savedFileLocation') || remote.app.getPath('documents')\r\n//const savedLocation = remote.app.getPath('/users/mac/documents/mymarkdown')\r\n  // 修改前代码\r\n  // const activeFile = files.find(file=>file.id === activeFileID)\r\n  // 修改后代码\r\n  const activeFile = files[activeFileID]\r\n  // 如果打开的数组中有搜索的文件\r\n  //const fileListArr = (searchedFiles.length > 0) ? searchedFiles : files\r\n  // 修改后的代码\r\n  const fileListArr = (searchedFiles.length > 0) ? searchedFiles : filesArr\r\n  \r\n  const openedFiles = openedFileIDs.map(openID => {\r\n    // return files.find(file => file.id === openID)\r\n    return files[openID]\r\n  })\r\n  // 点击文件\r\n  const fileClick = (fileID) => {\r\n    // set current active file\r\n    setActiveFileID(fileID)\r\n    const currentFile = files[fileID]\r\n    \r\n    // 读取文件的信息\r\n    if(!currentFile.isLoaded){\r\n      fileHelper.readFile(currentFile.path).then(value => {\r\n        const newFile = { ...files[fileID], body: value, isLoaded: true }\r\n        setFiles({ ...files, [fileID]: newFile })\r\n      })\r\n    }\r\n    \r\n    // if openedFiles don't have the current ID\r\n    // then add new fileID to openedFiles\r\n    if(!openedFileIDs.includes(fileID)){\r\n      setOpenedFileIDs([ ...openedFileIDs, fileID ])\r\n    }\r\n  }\r\n  const tabClick = (fileID) => {\r\n    // set current active file\r\n    setActiveFileID(fileID)\r\n  }\r\n  // 关闭Tab功能\r\n  const tabClose = (id) => {\r\n    // remove current id from openedFileID\r\n    const tabsWithout = openedFileIDs.filter(fileID => fileID !== id)\r\n    setOpenedFileIDs(tabsWithout)\r\n    // set the active to the first opened tab if still tabs left\r\n    if(tabsWithout.length > 0){\r\n      setActiveFileID(tabsWithout[0])\r\n    }else{\r\n      setActiveFileID('')\r\n    }\r\n  }\r\n  // 当文件改变的时候\r\n  const fileChange = (id, value) => {\r\n    // 原来的代码\r\n    /* const newFile = files.map(file => {\r\n      if(file.id === id){\r\n      file.body = value\r\n    }\r\n    return file\r\n    }) */\r\n   \r\n   // 如果所编辑的文件中有修改\r\n   if(value !== files[id].body){\r\n     // 修改后的代码\r\n    const newFile = {...files[id], body: value}\r\n    setFiles({...files, [id]: newFile})\r\n    // update unsavedIDs\r\n    if(!unsavedFileIDs.includes(id)){\r\n      setUnsavedFileIDs([...unsavedFileIDs, id])\r\n    }\r\n   }\r\n  }\r\n    // 当删除文件的时候\r\n  const deleteFile = (id) => {\r\n    fileHelper.deleteFile(files[id].path).then(() => {\r\n      // 修改前的代码\r\n      //const newFile = files.filter(file => file.id !== id)\r\n      // 修改后的代码\r\n      delete files[id]\r\n      setFiles(files)\r\n      // 数据持久化\r\n      saveFilesToStore(files)\r\n      // close the tab if opened\r\n      tabClose(id)\r\n    })\r\n  }\r\n  // 更新文件名的功能\r\n  const updateFileName = (id, title, isNew) => {\r\n    // 修改前的代码\r\n    //  const newFiles = files.map(file => {\r\n    //    if(file.id === id){\r\n    //      file.title = title\r\n    //      file.isNew = false\r\n    //    }\r\n    //    return file\r\n    //  })\r\n    // setFiles(newFiles)\r\n    \r\n    // newPath should be different based on isNew\r\n    // if isNew is false, path should be old dirname + new title\r\n    const newPath = isNew ? \r\n      join(savedLocation, `${title}.md`)\r\n      : join(dirname(files[id].path), `${title}.md`)\r\n    \r\n    // 修改后的代码\r\n    const modifiedFile = {...files[id], title, isNew: false, path: newPath}\r\n    const newFiles = { ...files, [id]: modifiedFile }\r\n    // 如果是新建文件需要【首次命名】\r\n    if(isNew){\r\n      // 那么保存新建的文件到savedLocation所指定的路径(即documents)\r\n      fileHelper.writeFile(newPath,\r\n        files[id].body).then((res) => {\r\n          setFiles(newFiles)\r\n          saveFilesToStore(newFiles)\r\n          console.log(\"🌹🌹🌹🌹🌹🌹🌹🌹🌹执行了!\") // 可以执行\r\n          console.log(res) // undefined\r\n        }).catch(err => {\r\n          console.log(\"👻👻👻👻👻👻👻👻👻👻异常了!\")\r\n        })\r\n    }else{ //否则如果是已经存在的文件需要【重命名】\r\n      const oldPath = files[id].path\r\n      fileHelper.renameFile(oldPath,newPath).then(() => {\r\n        setFiles(newFiles)\r\n        saveFilesToStore(newFiles)\r\n      })\r\n    }\r\n  }\r\n  // 文件搜索功能\r\n  const fileSearch = (keyword) => {\r\n    // filter out the new files based on the keyword\r\n    \r\n    // 修改前的代码\r\n    //const newFiles = files.filter(file => file.title.includes(keyword))\r\n    // 修改后的代码\r\n    const newFiles = filesArr.filter(file => file.title.includes(keyword))\r\n    // setFiles(newFiles)\r\n    setSearchedFiles(newFiles)\r\n  }\r\n  \r\n  // 新建文件\r\n  const createNewFile = () => {\r\n    const newID = uuidv4()\r\n    \r\n    // 修改前的代码\r\n    //  const newFiles = [\r\n    //    ...files,\r\n    //    {\r\n    //      id: newID,\r\n    //      title: '',\r\n    //      body: '## 请输入Markdown',\r\n    //      createAt: new Date().getTime(),\r\n    //      isNew: true\r\n    //    }\r\n    //  ]\r\n    //  setFiles(newFiles)\r\n    \r\n    // 修改后的代码\r\n    const newFile = {\r\n      id: newID,\r\n      title: '',\r\n      body: '## 请输入Markdown',\r\n      createAt: new Date().getTime(),\r\n      isNew: true\r\n    }\r\n    setFiles({...files, [newID]: newFile})\r\n  }\r\n  // 保存当前的文件\r\n  const saveCurrentFile = () => {\r\n    // 如果存在活跃的文件，才能保存(如果不进行判断，则会报错)\r\n    if(activeFile){\r\n      fileHelper.writeFile(activeFile.path,\r\n      activeFile.body).then(() => {\r\n        setUnsavedFileIDs(unsavedFileIDs.filter(id => id !== activeFile.id))\r\n      })\r\n    }\r\n  }\r\n  const importFiles = () => {\r\n    remote.dialog.showOpenDialog({\r\n      title: '选择导入的Markdown文件',\r\n      properties: ['openFile', 'multiSelections'],\r\n      filters: [ \r\n        {name: 'Markdown files', extensions: ['md']} \r\n      ]\r\n    }).then(result => {\r\n        // console.log(result)\r\n        console.log(result.filePaths)\r\n        var paths = result.filePaths\r\n        if(Array.isArray(paths)){\r\n          // filter out the path we already have in electron store\r\n          // [\"/Users/mac/xxx.md\", \"/Users/mac/yyy.md\"]\r\n          const filteredPaths = paths.filter(path => {\r\n            const alreadyAdded = Object.values(files).find(file => {\r\n              return file.path === path\r\n            })\r\n            return !alreadyAdded\r\n          })\r\n          // extend the path array to an array contains files info\r\n          // [{ id: '1', path: '', title: '' }, {}]\r\n          const importFilesArr = filteredPaths.map(path => {\r\n            return {\r\n              id: uuidv4(),\r\n              title: basename(path, extname(path)),\r\n              path,\r\n            }\r\n          })\r\n          // 打印新导入的文件列表\r\n          //console.log(importFilesArr)\r\n          \r\n          // get the new files object in flattenArr\r\n          const newFiles = { ...files, ...flattenArr(importFilesArr)}\r\n          // 打印所有的文件列表\r\n          //console.log(newFiles)\r\n          // setState and update electron store\r\n          setFiles(newFiles)\r\n          // 更新electron store\r\n          saveFilesToStore(newFiles)\r\n          if(importFilesArr.length){\r\n            remote.dialog.showMessageBox({\r\n              type: 'info',\r\n              title: `成功导入了${importFilesArr.length}个文件`,\r\n              message: `成功导入了${importFilesArr.length}个文件`,\r\n            })\r\n          }\r\n        }\r\n    })\r\n  }\r\n  \r\n  useIpcRenderer({\r\n    'create-new-file': createNewFile,\r\n    'import-file': importFiles,\r\n    'save-edit-file': saveCurrentFile\r\n  })\r\n  \n  return (\n    <div className=\"App container-fluid px-0\">\n      <div className=\"row no-gutters\">\r\n        <div className=\"col-3 bg-light left-panel\">\r\n          <FileSearch\r\n            title=\"我的云文档\"\r\n            onFileSearch={ fileSearch }\r\n          />\r\n          <FileList\r\n            files={fileListArr}\r\n            onFileClick={ fileClick }\r\n            onFileDelete={ deleteFile }\r\n            onSaveEdit={ updateFileName }\r\n          />\r\n          <div className=\"row no-gutters button-group\">\r\n            <div className=\"col\">\r\n              <BottomBtn\r\n                text=\"新建\"\r\n                colorClass=\"btn-primary\"\r\n                icon={ faPlus }\r\n                onBtnClick={createNewFile}\r\n              />\r\n            </div>\r\n            <div className=\"col\">\r\n              <BottomBtn\r\n                text=\"导入\"\r\n                colorClass=\"btn-success\"\r\n                icon={ faFileImport }\r\n                onBtnClick={ importFiles }\r\n              />\r\n            </div>\r\n            <div className=\"col\">\r\n              <BottomBtn \r\n                text=\"保存\"\r\n                colorClass=\"btn-hope-red\"\r\n                icon={ faSave }\r\n                onBtnClick={saveCurrentFile}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-9 right-panel\">\r\n          { !activeFile &&\r\n            <div className=\"start-page\">\r\n              选择或者创建新的Markdown 文档\r\n            </div>\r\n          }\r\n          { activeFile &&\r\n            <>\r\n              <TabList\r\n                files={openedFiles}\r\n                activeId={activeFileID}\r\n                unsaveIds={unsavedFileIDs}\r\n                onTabClick={tabClick}\r\n                onCloseTab={tabClose}\r\n              />\r\n              <SimpleMDE\r\n                key={activeFile && activeFile.id}\r\n                value={activeFile && activeFile.body}\r\n                onChange={(value) => {fileChange(activeFile.id, value)}}\r\n                options={{\r\n                  minHeight: '515px',\r\n                  // 阻止自动下载\r\n                  autoDownloadFontAwesome: false\r\n                }}\r\n              />\r\n            </>\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\n  );\n}\n\nexport default App;\n","/Users/mac/Desktop/2021师资培训Electron/myproject/src/reportWebVitals.js",[],"/Users/mac/Desktop/2021师资培训Electron/myproject/src/components/FileSearch.js",[],"/Users/mac/Desktop/2021师资培训Electron/myproject/src/components/FileList.js",["66","67","68","69","70","71"],"import React, { useState, useEffect, useRef } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEdit, faTrash, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport { faMarkdown } from '@fortawesome/free-brands-svg-icons'\nimport PropTypes from 'prop-types'\nimport useKeyPress from '../hooks/useKeyPress'\r\nimport useContextMenu from '../hooks/useContextMenu'\r\nimport { getParentNode } from '../utils/helper'\n\n// load nodejs module\nconst { remote } = window.require('electron')\nconst { Menu, MenuItem } = remote\n\nconst FileList = ({ files, onFileClick, onSaveEdit, onFileDelete }) => {\n  const [ editStatus, setEditStatus ] = useState(false)\r\n  const [ value, setValue ] = useState('')\n  let node = useRef(null)\n  const enterPressed = useKeyPress(13)\r\n  const escPressed = useKeyPress(27)\n  \n  const closeSearch = (editItem) => {\n    // 设置默认编辑状态\n    setEditStatus(false)\n    // 设置默认值\n    setValue('')\n    // if we are editing a newly created file,\n    // we should delete this file when pressing esc\n    if(editItem.isNew){\n      onFileDelete(editItem.id)\n    }\n  }\n  \n  useEffect(() => {\n    const newFile = files.find(file => file.isNew)\n    // console.log(newFile) //undefined\n    if(newFile){\n      setEditStatus(newFile.id)\n      setValue(newFile.title)\n    }\n    // 当files有所变化的时候运行该useEffect\n  }, [files])\n  \n  const clickedItem = useContextMenu([\n    {\n      label: '打开',\n      click: () => {\n        // console.log('clicking', clickedItem)\n        const parentElement = getParentNode(clickedItem.current, 'file-item')\n        if(parentElement){\n          onFileClick(parentElement.dataset.id)\n        }\n        //console.log(parentElement.dataset.id)\n      }\n    },\n    {\n      label: '重命名',\n      click: () => {\n        console.log('renaming')\n      }\n    },\n    {\n      label: '删除',\n      click: () => {\n        console.log('deleting')\n      }\n    }\n  ], '.file-list', [files])\n  \n  /*useEffect(() => {\n    const menu = new Menu()\n    menu.append(new MenuItem({\n      label: '打开',\n      click: () => {\n        console.log('clicking')\n      }\n    }))\n    menu.append(new MenuItem({\n      label: '重命名',\n      click: () => {\n        console.log('renaming')\n      }\n    }))\n    menu.append(new MenuItem({\n      label: '删除',\n      click: () => {\n        console.log('deleting')\n      }\n    }))\n    const handleContextMenu = (e) => {\n      menu.popup({window: remote.getCurrentWindow()})\n    }\n    window.addEventListener('contextmenu', handleContextMenu)\n    return () => {\n      window.removeEventListener('contextmenu', handleContextMenu)\n    }\n  }) */\n\n  useEffect(() => {\n    const editItem = files.find(file => file.id === editStatus)\r\n    // 如果是enter键/同时是编辑状态/同时value值不为空,那么就传入搜索值\n    if(enterPressed && editStatus && (value.trim() !== '')){\n      onSaveEdit(editItem.id, value, editItem.isNew)\n      // 设置编辑状态为默认值\n      setEditStatus(false)\n      // 设置值为默认值\n      setValue('')\n      // 如果是Esc键/同时是编辑状态，那么就关闭\n    }else if(escPressed && editStatus){\n      closeSearch(editItem)\n    }\n  })\n  return (\n    <ul className=\"list-group list-group-flush file-list\">\n      {\n        files.map(file => (\n          <li className=\"list-group-item bg-light row d-flex align-items-center file-item mx-0\"\n              key={file.id}\n              data-id={file.id}\n              data-title={file.title}\n          >\n            { ((file.id !== editStatus) && !file.isNew) &&\n              <>\n                <span className=\"col-2\">\n                  <FontAwesomeIcon \n                    size=\"lg\" \n                    icon={ faMarkdown } \n                  />\r\n                </span>\n                <span \n                  className=\"col-6 c-link\"\n                  onClick={() => {onFileClick(file.id)}}\n                >\n                  {file.title}\n                </span>\n              </>\n            }\n            { ((file.id === editStatus) || file.isNew) &&\n              <>\n                <input className=\"form-control col-10\" \n                  value={value}\n                  placeholder=\"请输入文件名称\"\n                  onChange={ (e) => { setValue(e.target.value) } } />\n                <button type=\"button\"\n                  className=\"icon-button col-2\"\n                  onClick={() => { closeSearch(file)} }>\n                  <FontAwesomeIcon \n                    title=\"关闭\"\n                    size=\"lg\"\n                    icon={ faTimes }\n                  />\n                </button>\n              </>\n            }\n          </li>\n        ))\n      }\n    </ul>\n  )\n}\n\n// 添加属性检查\nFileList.propTypes = {\n  // 要求必须是数组\n  files: PropTypes.array,\n  // 要求必须是函数\n  onFileClick: PropTypes.func,\n  onFileDelete: PropTypes.func,\n  onSaveEdit: PropTypes.func,\n}\n\nexport default FileList\n","/Users/mac/Desktop/2021师资培训Electron/myproject/src/utils/defaultFiles.js",[],["72","73"],"/Users/mac/Desktop/2021师资培训Electron/myproject/src/hooks/useKeyPress.js",[],"/Users/mac/Desktop/2021师资培训Electron/myproject/src/components/BottomBtn.js",[],"/Users/mac/Desktop/2021师资培训Electron/myproject/src/components/TabList.js",["74"],"import React from 'react'\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classname'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport './TabList.scss'\n\nconst TabList = ({ files, activeId, unsaveIds, onTabClick, onCloseTab }) => {\n  return (\n    <ul className=\"nav nav-pills tablist-component\">\n      { files.map(file => {\n        const withUnsavedMark = unsaveIds.includes(file.id)\n        const fClassName = classNames({\n          'nav-link': true,\n          'active': file.id === activeId,\n          'withUnsaved': withUnsavedMark\n        })\n        return (\n          <li className=\"nav-item\" key={file.id}>\n            <a\n              href=\"#\"\n              className={fClassName}\n              onClick={(e) => { e.preventDefault(); onTabClick(file.id) }}\n            >\n              { file.title }\n              <span \n                className=\"ml-2 close-icon\"\n                onClick={(e) => {e.stopPropagation(); onCloseTab(file.id)}}\n              >\n                <FontAwesomeIcon\n                  icon={ faTimes }\n                />\n              </span>\n              { withUnsavedMark && <span className=\"rounded-circle ml-2 unsaved-icon\"></span> }\n            </a>\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n\n// 添加属性检查\nTabList.propTypes = {\n  files: PropTypes.array,\n  activeId: PropTypes.array,\n  onTabClick: PropTypes.func,\n  onCloseTab: PropTypes.func,\n}\n// 默认Props，当不提供的时候设置成空数组\nTabList.defaultProps = {\n  unsaveIds: []\n}\n\nexport default TabList\n","/Users/mac/Desktop/2021师资培训Electron/myproject/src/utils/helper.js",[],"/Users/mac/Desktop/2021师资培训Electron/myproject/src/utils/fileHelper.js",["75"],"// 在React中使用的话就需要改成window对象调用的形式\nconst fs = window.require('fs').promises\nconst path = window.require('path')\n\nconst fileHelper = {\n  readFile: (path) => {\n    return fs.readFile(path, { encoding: 'utf8' })\n  },\n  writeFile: (path, content) => {\n   return fs.writeFile(path, content, { encoding: 'utf8' })\n  },\n  renameFile: (path, newPath) => {\n    return fs.rename(path, newPath)\n  },\n  deleteFile: (path) => {\n    return fs.unlink(path)\n  }\n}\nexport default fileHelper","/Users/mac/Desktop/2021师资培训Electron/myproject/src/hooks/useContextMenu.js",["76","77"],"import { useEffect, useRef } from 'react'\nconst { remote } = window.require('electron')\nconst { Menu, MenuItem } = remote\n\nconst useContextMenu = (itemArr, targetSelector, deps) => {\n  let clickedElement = useRef(null)\n  useEffect(() => {\n    const menu = new Menu()\n    itemArr.forEach(item => {\n      menu.append(new MenuItem(item))\n    })\n    const handleContextMenu = (e) => {\n      // only show the context menu on current dom element or targetSelector\n      if(document.querySelector(targetSelector).contains(e.target)){\n        clickedElement.current = e.target\n        menu.popup({ window: remote.getCurrentWindow() })\n      }\n    }\n    window.addEventListener('contextmenu', handleContextMenu)\n    return () => {\n      window.removeEventListener('contextmenu', handleContextMenu)\n    }\n  }, deps)\n  return clickedElement\n}\n\nexport default useContextMenu","/Users/mac/Desktop/2021师资培训Electron/myproject/src/hooks/useIpcRenderer.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":1,"column":27,"nodeType":"84","messageId":"85","endLine":1,"endColumn":36},{"ruleId":"82","severity":1,"message":"86","line":25,"column":17,"nodeType":"84","messageId":"85","endLine":25,"endColumn":28},{"ruleId":"82","severity":1,"message":"87","line":3,"column":10,"nodeType":"84","messageId":"85","endLine":3,"endColumn":16},{"ruleId":"82","severity":1,"message":"88","line":3,"column":18,"nodeType":"84","messageId":"85","endLine":3,"endColumn":25},{"ruleId":"82","severity":1,"message":"89","line":12,"column":9,"nodeType":"84","messageId":"85","endLine":12,"endColumn":13},{"ruleId":"82","severity":1,"message":"90","line":12,"column":15,"nodeType":"84","messageId":"85","endLine":12,"endColumn":23},{"ruleId":"82","severity":1,"message":"91","line":17,"column":7,"nodeType":"84","messageId":"85","endLine":17,"endColumn":11},{"ruleId":"92","severity":1,"message":"93","line":98,"column":3,"nodeType":"84","endLine":98,"endColumn":12,"suggestions":"94"},{"ruleId":"78","replacedBy":"95"},{"ruleId":"80","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":20,"column":13,"nodeType":"99","endLine":24,"endColumn":14},{"ruleId":"82","severity":1,"message":"100","line":3,"column":7,"nodeType":"84","messageId":"85","endLine":3,"endColumn":11},{"ruleId":"92","severity":1,"message":"101","line":23,"column":6,"nodeType":"84","endLine":23,"endColumn":10},{"ruleId":"92","severity":1,"message":"102","line":23,"column":6,"nodeType":"84","endLine":23,"endColumn":10,"suggestions":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'ipcRenderer' is assigned a value but never used.","'faEdit' is defined but never used.","'faTrash' is defined but never used.","'Menu' is assigned a value but never used.","'MenuItem' is assigned a value but never used.","'node' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setEditStatus'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [files, enterPressed, editStatus, value, escPressed, onSaveEdit, closeSearch] as a second argument to the useEffect Hook.",["106"],["104"],["105"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'path' is assigned a value but never used.","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has missing dependencies: 'itemArr' and 'targetSelector'. Either include them or remove the dependency array.",["107"],"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},"Add dependencies array: [files, enterPressed, editStatus, value, escPressed, onSaveEdit, closeSearch]",{"range":"112","text":"113"},"Update the dependencies array to be: [itemArr, targetSelector]",{"range":"114","text":"115"},[3039,3039],", [files, enterPressed, editStatus, value, escPressed, onSaveEdit, closeSearch]",[800,804],"[itemArr, targetSelector]"]